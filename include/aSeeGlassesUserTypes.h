/*******************************************************************************/
/*
Copyright (C) 2016 - 2019, Beijing 7invensun Technology Co.Ltd.All rights reserved.
Permission is hereby granted, free of charge, to any person or organization obtaining
a copy of the software and accompanying documentation covered by this license(the "Software")
to use, reproduce, display, distribute, execute, and transmit the Software, and to prepare
derivative works of the Software, and to permit third - parties to whom the Software
is furnished to do so, all subject to the following :
The copyright notices in the Software and this entire statement, including the above
license grant, this restriction and the following disclaimer, must be included in all
copies of the Software, in whole or in part, and all derivative works of the Software,
unless such copies or derivative works are solely in the form of machine - executable
object code generated by a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
PURPOSE, TITLE AND NON - INFRINGEMENT.IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR ANYONE
DISTRIBUTING THE SOFTWARE BE LIABLE FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT,
TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
OTHER DEALINGS IN THE SOFTWARE.

@author 7invensun
*/
#ifndef _INCLUDE_7INVENSUN_ASEEGLASSES_USER_TYPES_H_
#define _INCLUDE_7INVENSUN_ASEEGLASSES_USER_TYPES_H_

#ifdef _MSC_VER		
#   ifdef _7INVENSUN_ASEEGLASSES_USER_SDK_DLL_EXPORTS
#       define _7INVENSUN_API __declspec(dllexport)	
#   else		
#       define _7INVENSUN_API __declspec(dllimport)	
#   endif//_7INVENSUN_ASEEGLASSES_USER_SDK_DLL_EXPORTS 
#   ifndef _7INVENSUN_CALL
#       define _7INVENSUN_CALL __stdcall
#   endif//_7INVENSUN_CALL
#else
#   define _7INVENSUN_API
#   define _7INVENSUN_CALL
#endif//_MSC_VER

#include <cstdint>

#ifndef API_ASEEGLASSES_7INVENSUN
namespace API_ASEEGLASSES_7INVENSUN {

	/**
	* @brief 坐标点结构
	*/
	struct _7_POINT
	{
		float x;
		float y;
	};

	/**
	* @brief 3D坐标点结构
	*/
	struct _7_POINT_3D
	{
		float x;
		float y;
		float z;
	};

	/**
	* @brief 瞳孔信息枚举类型
	*/
	enum PupilInfoValidity {
		PUPIL_INFO_CENTER,//瞳孔中心标识(0-1)
		PUPIL_INFO_DISTANCE,//瞳孔到镜头距离标识(mm)
		PUPIL_INFO_DIAMETER,//瞳孔直径，瞳孔长轴标识(0-1)
		PUPIL_INFO_DIAMETER_MM,//瞳孔直径，瞳孔长轴毫米值标识(mm)
		PUPIL_INFO_MINORAXIS,//瞳孔短轴标识（0-1）
		PUPIL_INFO_MINORAXIS_MM,//瞳孔短轴毫米值标识（mm）
	};

	/**
	* @brief 注视点信息枚举类型
	*/
	enum EyeGazeValidity {
		EYE_GAZE_POINT,//注视点坐标标识
		EYE_GAZE_RAW_POINT,//注视点平滑前坐标标识
		EYE_GAZE_SMOOTH_POINT,//注视点平滑后坐标标识
		EYE_GAZE_ORIGIN,//注视瞳孔中心坐标标识
		EYE_GAZE_DIRECTION,//注视矢量标识
		EYE_GAZE_RE,//注视点re值
	};

	enum EyeGazeExDataValidity {
		EYE_GAZE_EXDATA_SCORE = 0,//注视点分数
	};


	/**
	* @brief 瞳孔信息结构
	*/
	struct _7_PUPIL_INFO
	{
		uint32_t pupilBitMask;//瞳孔信息掩码，标识下面6个数据是否有效和无效
		_7_POINT pupilCenter;//瞳孔中心(0-1)，具体含义是拍摄的瞳孔在图像上的具体坐标值，坐标为归一化的值，图像宽高默认为1
		float pupilDistance;//瞳孔到镜头距离(mm)
		float pupilDiameter;//瞳孔直径，瞳孔长轴(0-1)，具体含义是瞳孔椭圆长轴大小的像素值与图像宽的比值，属于归一化的值
		float pupilDiameterMM;//瞳孔直径，瞳孔长轴毫米值(mm)
		float pupilMinorAxis;//瞳孔短轴（0-1），具体含义是瞳孔椭圆短轴大小的像素值与图像宽的比值，属于归一化的值
		float pupilMinorAxisMM;//瞳孔短轴毫米值（mm）
		uint32_t exDataBitMask;//预留数据掩码
		float exData[32];//预留数据
	};

	struct _7_GAZE_POINT
	{
		uint32_t gazeBitMask;//下面6个信息掩码，标识那个信息有效和无效
		_7_POINT_3D gazePoint;//注视点坐标，现阶段只有x，y有效，z值默认为0，其中x，y坐标的范围和校准时输入的几个校准点的范围有关，并不是固定值。
		_7_POINT_3D rawPoint;//注视点平滑前坐标，x，y有效，z值默认为0，x，y范围同上
		_7_POINT_3D smoothPoint;//注视点平滑后坐标，x，y有效，z值默认为0，x，y范围同上
		_7_POINT_3D gazeOrigin;//注视瞳孔中心坐标
		_7_POINT_3D gazeDirection;//注视矢量
		float re;//注视点re值，置信度
		uint32_t exDataBitMask;//预留数据掩码
		float exData[32];//预留数据
	};

	/**
	* @brief 扩展眼睛信息结构
	*/
	struct _7_EYE_EXDATA
	{
		uint32_t eyeDataExBitMask;//眼睛附加信息掩码，标识下面4个数据的有效和无效
		int32_t blink;//眨眼信息(0,1,2,3,4,5)，0-为非眨眼状态，1-开始眨眼，2-闭眼过程，3-闭眼，4-睁眼过程，5-眨眼结束
		float openness;//眼睛开合度(0-100)，表示眼睛开合程度，接近0为闭眼，100左右正常睁眼，大于100属于瞪眼，故意睁大眼睛
		float eyelidUp;//上眼皮数据(0-1)，具体含义是上眼皮在图像里垂直方向的位置，归一化的值，图像高为1
		float eyelidDown;//下眼皮数据(0-1)，具体含义是下眼皮在图像里垂直方向的位置，归一化的值，图像高为1
		uint32_t exDataBitMask;//预留数据掩码
		float exData[32];//预留数据
	};

	struct _7_RESERVED // reserved
	{
		uint8_t* reserved1;
		uint32_t reserved2;
		uint32_t reserved3;
		uint32_t reserved4;
		uint32_t reserved5;
	};

	struct _7_EYEDATA
	{
		uint64_t timestamp;//时间戳
						 //注视点相关
		int32_t recommend;//是否有推荐点，0无推荐点，1使用左眼为推荐点，2使用右眼为推荐点
		_7_GAZE_POINT recomGaze;//推荐注视点
		_7_GAZE_POINT leftGaze;//左眼注视点
		_7_GAZE_POINT rightGaze;//右眼注视点

								//瞳孔相关
		_7_PUPIL_INFO leftPupil;//左眼瞳孔信息
		_7_PUPIL_INFO rightPupil;//右眼瞳孔信息

								 //其他眼睛信息相关
		_7_EYE_EXDATA leftExData;//左眼附加信息（眨眼信息和上下眼皮信息）
		_7_EYE_EXDATA rightExData;//右眼附件信息（眨眼信息和上下眼皮信息）

		int32_t num1;
		_7_RESERVED* buf1;
		int32_t num2;
		_7_RESERVED* buf2;

								 //预留数据相关
		uint32_t exDataBitMask;//预留数据的掩码
		float exData[32];//预留数据  [0]注视状态 0否 1是
	};

	struct _7_COEFFICIENT // calibration coefficient
	{
		uint8_t data[2048];//!< 系数数据
	};


	//获取眼睛信息的宏定义
	inline int _GET_VALID_VALUE(unsigned char position, uint32_t bits)
	{
		unsigned int the_mask = (((unsigned int)1) << position);
		return (the_mask &= bits) >> position;
	}


	//获取时间戳，永远存在，直接获取
#define _GET_TIMESTAMP(eyes) (eyes)->timestamp
	//获取是否有推荐点,int型，0无推荐点，1左眼为推荐点，2右眼为推荐点
#define _GET_RECOMMEND(eyes) (eyes)->recommend

	//获取推荐点信息
	//推荐点坐标是否有效，0为无效，1为有效
#define _ISVALID_RECOM_EYE_GAZE_POINT(eyes) _GET_VALID_VALUE((unsigned char)EYE_GAZE_POINT,(eyes)->recomGaze.gazeBitMask)
	//获取推荐点坐标值，返回_7_POINT_3D
#define _GET_RECOM_EYE_GAZE_POINT(eyes) (eyes)->recomGaze.gazePoint
	//推荐点平滑前坐标是否有效，0为无效，1为有效
#define _ISVALID_RECOM_EYE_GAZE_RAW_POINT(eyes) _GET_VALID_VALUE((unsigned char)EYE_GAZE_RAW_POINT,(eyes)->recomGaze.gazeBitMask)
	//获取推荐点平滑前坐标，返回_7_POINT_3D
#define _GET_RECOM_EYE_GAZE_RAW_POINT(eyes) (eyes)->recomGaze.rawPoint
	//推荐点平滑后坐标是否有效，0为无效，1为有效
#define _ISVALID_RECOM_EYE_GAZE_SMOOTH_POINT(eyes) _GET_VALID_VALUE((unsigned char)EYE_GAZE_SMOOTH_POINT,(eyes)->recomGaze.gazeBitMask)
	//获取推荐点平滑后坐标，返回_7_POINT_3D
#define _GET_RECOM_EYE_GAZE_SMOOTH_POINT(eyes) (eyes)->recomGaze.smoothPoint
	//推荐点瞳孔中心坐标是否有效，0为无效，1为有效
#define _ISVALID_RECOM_EYE_GAZE_ORIGIN(eyes) _GET_VALID_VALUE((unsigned char)EYE_GAZE_ORIGIN,(eyes)->recomGaze.gazeBitMask)
	//获取推荐点瞳孔中心坐标，返回_7_POINT_3D
#define _GET_RECOM_EYE_GAZE_ORIGIN(eyes) (eyes)->recomGaze.gazeOrigin
	//推荐点注视矢量是否有效，0为无效，1为有效
#define _ISVALID_RECOM_EYE_GAZE_DIRECTION(eyes) _GET_VALID_VALUE((unsigned char)EYE_GAZE_DIRECTION,(eyes)->recomGaze.gazeBitMask)
	//获取推荐点注视矢量，返回_7_POINT_3D
#define _GET_RECOM_EYE_GAZE_DIRECTION(eyes) (eyes)->recomGaze.gazeDirection
	//推荐点注视点re值是否有效，0为无效，1为有效
#define _ISVALID_RECOM_EYE_GAZE_RE(eyes) _GET_VALID_VALUE((unsigned char)EYE_GAZE_RE,(eyes)->recomGaze.gazeBitMask)
	//获取推荐点注视点re值，返回float
#define _GET_RECOM_EYE_GAZE_RE(eyes) (eyes)->recomGaze.re
	//推荐点分数值是否有效，0为无效，1为有效
#define _ISVALID_RECOM_EYE_GAZE_EXDATA_SCORE(eyes) _GET_VALID_VALUE((unsigned char)EYE_GAZE_EXDATA_SCORE,(eyes)->recomGaze.exDataBitMask)
	//获取推荐点分数值，返回float（0-10）
#define _GET_RECOM_EYE_GAZE_EXDATA_SCORE(eyes) (eyes)->recomGaze.exData[EYE_GAZE_EXDATA_SCORE]

	//获取左眼注视点信息
	//左眼注视点坐标是否有效，0为无效，1为有效
#define _ISVALID_LEFT_EYE_GAZE_POINT(eyes) _GET_VALID_VALUE((unsigned char)EYE_GAZE_POINT,(eyes)->leftGaze.gazeBitMask)
	//获取左眼注视点坐标值，返回_7_POINT_3D
#define _GET_LEFT_EYE_GAZE_POINT(eyes) (eyes)->leftGaze.gazePoint
	//左眼注视点平滑前坐标是否有效，0为无效，1为有效
#define _ISVALID_LEFT_EYE_GAZE_RAW_POINT(eyes) _GET_VALID_VALUE((unsigned char)EYE_GAZE_RAW_POINT,(eyes)->leftGaze.gazeBitMask)
	//获取左眼注视点平滑前坐标，返回_7_POINT_3D
#define _GET_LEFT_EYE_GAZE_RAW_POINT(eyes) (eyes)->leftGaze.rawPoint
	//左眼注视点平滑后坐标是否有效，0为无效，1为有效
#define _ISVALID_LEFT_EYE_GAZE_SMOOTH_POINT(eyes) _GET_VALID_VALUE((unsigned char)EYE_GAZE_SMOOTH_POINT,(eyes)->leftGaze.gazeBitMask)
	//获取左眼注视点平滑后坐标，返回_7_POINT_3D
#define _GET_LEFT_EYE_GAZE_SMOOTH_POINT(eyes) (eyes)->leftGaze.smoothPoint
	//左眼注视点瞳孔中心坐标是否有效，0为无效，1为有效
#define _ISVALID_LEFT_EYE_GAZE_ORIGIN(eyes) _GET_VALID_VALUE((unsigned char)EYE_GAZE_ORIGIN,(eyes)->leftGaze.gazeBitMask)
	//获取左眼注视点瞳孔中心坐标，返回_7_POINT_3D
#define _GET_LEFT_EYE_GAZE_ORIGIN(eyes) (eyes)->leftGaze.gazeOrigin
	//左眼注视点注视矢量是否有效，0为无效，1为有效
#define _ISVALID_LEFT_EYE_GAZE_DIRECTION(eyes) _GET_VALID_VALUE((unsigned char)EYE_GAZE_DIRECTION,(eyes)->leftGaze.gazeBitMask)
	//获取左眼注视点注视矢量，返回_7_POINT_3D
#define _GET_LEFT_EYE_GAZE_DIRECTION(eyes) (eyes)->leftGaze.gazeDirection
	//左眼注视点注视点re值是否有效，0为无效，1为有效
#define _ISVALID_LEFT_EYE_GAZE_RE(eyes) _GET_VALID_VALUE((unsigned char)EYE_GAZE_RE,(eyes)->leftGaze.gazeBitMask)
	//获取左眼注视点注视点re值，返回float
#define _GET_LEFT_EYE_GAZE_RE(eyes) (eyes)->leftGaze.re
	//左眼注视点分数值是否有效，0为无效，1为有效
#define _ISVALID_LEFT_EYE_GAZE_EXDATA_SCORE(eyes) _GET_VALID_VALUE((unsigned char)EYE_GAZE_EXDATA_SCORE,(eyes)->leftGaze.exDataBitMask)
	//获取左眼注视点分数值，返回float（0-10）
#define _GET_LEFT_EYE_GAZE_EXDATA_SCORE(eyes) (eyes)->leftGaze.exData[EYE_GAZE_EXDATA_SCORE]

	//获取右眼注视点信息
	//右眼注视点坐标是否有效，0为无效，1为有效
#define _ISVALID_RIGHT_EYE_GAZE_POINT(eyes) _GET_VALID_VALUE((unsigned char)EYE_GAZE_POINT,(eyes)->rightGaze.gazeBitMask)
	//获取右眼注视点坐标值，返回_7_POINT_3D
#define _GET_RIGHT_EYE_GAZE_POINT(eyes) (eyes)->rightGaze.gazePoint
	//右眼注视点平滑前坐标是否有效，0为无效，1为有效
#define _ISVALID_RIGHT_EYE_GAZE_RAW_POINT(eyes) _GET_VALID_VALUE((unsigned char)EYE_GAZE_RAW_POINT,(eyes)->rightGaze.gazeBitMask)
	//获取右眼注视点平滑前坐标，返回_7_POINT_3D
#define _GET_RIGHT_EYE_GAZE_RAW_POINT(eyes) (eyes)->rightGaze.rawPoint
	//右眼注视点平滑后坐标是否有效，0为无效，1为有效
#define _ISVALID_RIGHT_EYE_GAZE_SMOOTH_POINT(eyes) _GET_VALID_VALUE((unsigned char)EYE_GAZE_SMOOTH_POINT,(eyes)->rightGaze.gazeBitMask)
	//获取右眼注视点平滑后坐标，返回_7_POINT_3D
#define _GET_RIGHT_EYE_GAZE_SMOOTH_POINT(eyes) (eyes)->rightGaze.smoothPoint
	//右眼注视点瞳孔中心坐标是否有效，0为无效，1为有效
#define _ISVALID_RIGHT_EYE_GAZE_ORIGIN(eyes) _GET_VALID_VALUE((unsigned char)EYE_GAZE_ORIGIN,(eyes)->rightGaze.gazeBitMask)
	//获取右眼注视点瞳孔中心坐标，返回_7_POINT_3D
#define _GET_RIGHT_EYE_GAZE_ORIGIN(eyes) (eyes)->rightGaze.gazeOrigin
	//右眼注视点注视矢量是否有效，0为无效，1为有效
#define _ISVALID_RIGHT_EYE_GAZE_DIRECTION(eyes) _GET_VALID_VALUE((unsigned char)EYE_GAZE_DIRECTION,(eyes)->rightGaze.gazeBitMask)
	//获取右眼注视点注视矢量，返回_7_POINT_3D
#define _GET_RIGHT_EYE_GAZE_DIRECTION(eyes) (eyes)->rightGaze.gazeDirection
	//右眼注视点注视点re值是否有效，0为无效，1为有效
#define _ISVALID_RIGHT_EYE_GAZE_RE(eyes) _GET_VALID_VALUE((unsigned char)EYE_GAZE_RE,(eyes)->rightGaze.gazeBitMask)
	//获取右眼注视点注视点re值，返回float
#define _GET_RIGHT_EYE_GAZE_RE(eyes) (eyes)->rightGaze.re
	//右眼注视点分数值是否有效，0为无效，1为有效
#define _ISVALID_RIGHT_EYE_GAZE_EXDATA_SCORE(eyes) _GET_VALID_VALUE((unsigned char)EYE_GAZE_EXDATA_SCORE,(eyes)->rightGaze.exDataBitMask)
	//获取右眼注视点分数值，返回float（0-10）
#define _GET_RIGHT_EYE_GAZE_EXDATA_SCORE(eyes) (eyes)->rightGaze.exData[EYE_GAZE_EXDATA_SCORE]

	//左眼瞳孔信息
	//左眼瞳孔中心是否有效，0为无效，1为有效
#define _ISVALID_LEFT_PUPIL_INFO_CENTER(eyes) _GET_VALID_VALUE((unsigned char)PUPIL_INFO_CENTER,(eyes)->leftPupil.pupilBitMask)
	//获取左眼瞳孔中心坐标，返回_7_POINT（0-1）
#define _GET_LEFT_PUPIL_INFO_CENTER(eyes) (eyes)->leftPupil.pupilCenter
	//左眼瞳孔到镜头距离是否有效，0为无效，1为有效
#define _ISVALID_LEFT_PUPIL_INFO_DISTANCE(eyes) _GET_VALID_VALUE((unsigned char)PUPIL_INFO_DISTANCE,(eyes)->leftPupil.pupilBitMask)
	//获取左眼瞳孔到镜头距离，返回float（单位mm）
#define _GET_LEFT_PUPIL_INFO_DISTANCE(eyes) (eyes)->leftPupil.pupilDistance
	//左眼瞳孔直径是否有效，0为无效，1为有效
#define _ISVALID_LEFT_PUPIL_INFO_DIAMETER(eyes) _GET_VALID_VALUE((unsigned char)PUPIL_INFO_DIAMETER,(eyes)->leftPupil.pupilBitMask)
	//获取左眼瞳孔直径，返回float（0-1）
#define _GET_LEFT_PUPIL_INFO_DIAMETER(eyes) (eyes)->leftPupil.pupilDiameter
	//左眼瞳孔直径毫米值是否有效，0为无效，1为有效
#define _ISVALID_LEFT_PUPIL_INFO_DIAMETER_MM(eyes) _GET_VALID_VALUE((unsigned char)PUPIL_INFO_DIAMETER_MM,(eyes)->leftPupil.pupilBitMask)
	//获取左眼瞳孔直径毫米值，返回float（单位mm）
#define _GET_LEFT_PUPIL_INFO_DIAMETER_MM(eyes) (eyes)->leftPupil.pupilDiameterMM
	//左眼瞳孔短轴是否有效，0为无效，1为有效
#define _ISVALID_LEFT_PUPIL_INFO_MINORAXIS(eyes) _GET_VALID_VALUE((unsigned char)PUPIL_INFO_MINORAXIS,(eyes)->leftPupil.pupilBitMask)
	//获取左眼瞳孔短轴，返回float（0-1）
#define _GET_LEFT_PUPIL_INFO_MINORAXIS(eyes) (eyes)->leftPupil.pupilMinorAxis
	//左眼瞳孔短轴毫米值是否有效，0为无效，1为有效
#define _ISVALID_LEFT_PUPIL_INFO_MINORAXIS_MM(eyes) _GET_VALID_VALUE((unsigned char)PUPIL_INFO_MINORAXIS_MM,(eyes)->leftPupil.pupilBitMask)
	//获取左眼瞳孔短轴毫米值，返回float（单位mm）
#define _GET_LEFT_PUPIL_INFO_MINORAXIS_MM(eyes) (eyes)->leftPupil.pupilMinorAxisMM

	//右眼瞳孔信息
	//右眼瞳孔中心是否有效，0为无效，1为有效
#define _ISVALID_RIGHT_PUPIL_INFO_CENTER(eyes) _GET_VALID_VALUE((unsigned char)PUPIL_INFO_CENTER,(eyes)->rightPupil.pupilBitMask)
	//获取右眼瞳孔中心坐标，返回_7_POINT（0-1）
#define _GET_RIGHT_PUPIL_INFO_CENTER(eyes) (eyes)->rightPupil.pupilCenter
	//右眼瞳孔到镜头距离是否有效，0为无效，1为有效
#define _ISVALID_RIGHT_PUPIL_INFO_DISTANCE(eyes) _GET_VALID_VALUE((unsigned char)PUPIL_INFO_DISTANCE,(eyes)->rightPupil.pupilBitMask)
	//获取右眼瞳孔到镜头距离，返回float（单位mm）
#define _GET_RIGHT_PUPIL_INFO_DISTANCE(eyes) (eyes)->rightPupil.pupilDistance
	//右眼瞳孔直径是否有效，0为无效，1为有效
#define _ISVALID_RIGHT_PUPIL_INFO_DIAMETER(eyes) _GET_VALID_VALUE((unsigned char)PUPIL_INFO_DIAMETER,(eyes)->rightPupil.pupilBitMask)
	//获取右眼瞳孔直径，返回float（0-1）
#define _GET_RIGHT_PUPIL_INFO_DIAMETER(eyes) (eyes)->rightPupil.pupilDiameter
	//右眼瞳孔直径毫米值是否有效，0为无效，1为有效
#define _ISVALID_RIGHT_PUPIL_INFO_DIAMETER_MM(eyes) _GET_VALID_VALUE((unsigned char)PUPIL_INFO_DIAMETER_MM,(eyes)->rightPupil.pupilBitMask)
	//获取右眼瞳孔直径毫米值，返回float（单位mm）
#define _GET_RIGHT_PUPIL_INFO_DIAMETER_MM(eyes) (eyes)->rightPupil.pupilDiameterMM
	//右眼瞳孔短轴是否有效，0为无效，1为有效
#define _ISVALID_RIGHT_PUPIL_INFO_MINORAXIS(eyes) _GET_VALID_VALUE((unsigned char)PUPIL_INFO_MINORAXIS,(eyes)->rightPupil.pupilBitMask)
	//获取右眼瞳孔短轴，返回float（0-1）
#define _GET_RIGHT_PUPIL_INFO_MINORAXIS(eyes) (eyes)->rightPupil.pupilMinorAxis
	//右眼瞳孔短轴毫米值是否有效，0为无效，1为有效
#define _ISVALID_RIGHT_PUPIL_INFO_MINORAXIS_MM(eyes) _GET_VALID_VALUE((unsigned char)PUPIL_INFO_MINORAXIS_MM,(eyes)->rightPupil.pupilBitMask)
	//获取右眼瞳孔短轴毫米值，返回float（单位mm）
#define _GET_RIGHT_PUPIL_INFO_MINORAXIS_MM(eyes) (eyes)->rightPupil.pupilMinorAxisMM

	//左眼附件信息
	//左眼眨眼信息是否有效，0为无效，1为有效
#define _ISVALID_LEFT_EYE_EXDATA_BLINK(eyes) _GET_VALID_VALUE((unsigned char)EYE_EXDATA_BLINK,(eyes)->leftExData.eyeDataExBitMask)
	//获取左眼眨眼信息，返回int(0没眨眼，1开始眨眼，2闭眼过程，3闭眼，4睁眼过程，5眨眼结束)
#define _GET_LEFT_EYE_EXDATA_BLINK(eyes) (eyes)->leftExData.blink
	//左眼眼睛开合度是否有效，0为无效，1为有效
#define _ISVALID_LEFT_EYE_EXDATA_OPENNESS(eyes) _GET_VALID_VALUE((unsigned char)EYE_EXDATA_OPENNESS,(eyes)->leftExData.eyeDataExBitMask)
	//获取左眼眼睛开合度，返回(0-100)
#define _GET_LEFT_EYE_EXDATA_OPENNESS(eyes) (eyes)->leftExData.openness
	//左眼上眼皮数据是否有效，0为无效，1为有效
#define _ISVALID_LEFT_EYE_EXDATA_EYELIDUP(eyes) _GET_VALID_VALUE((unsigned char)EYE_EXDATA_EYELIDUP,(eyes)->leftExData.eyeDataExBitMask)
	//获取左眼上眼皮数据，返回float（0-1）
#define _GET_LEFT_EYE_EXDATA_EYELIDUP(eyes) (eyes)->leftExData.eyelidUp
	//左眼下眼皮数据是否有效，0为无效，1为有效
#define _ISVALID_LEFT_EYE_EXDATA_EYELIDDOWN(eyes) _GET_VALID_VALUE((unsigned char)EYE_EXDATA_EYELIDDOWN,(eyes)->leftExData.eyeDataExBitMask)
	//获取左眼下眼皮数据，返回float（0-1）
#define _GET_LEFT_EYE_EXDATA_EYELIDDOWN(eyes) (eyes)->leftExData.eyelidDown

	//右眼附件信息
	//右眼眨眼信息是否有效，0为无效，1为有效
#define _ISVALID_RIGHT_EYE_EXDATA_BLINK(eyes) _GET_VALID_VALUE((unsigned char)EYE_EXDATA_BLINK,(eyes)->rightExData.eyeDataExBitMask)
	//获取右眼眨眼信息，返回int(0没眨眼，1开始眨眼，2闭眼过程，3闭眼，4睁眼过程，5眨眼结束)
#define _GET_RIGHT_EYE_EXDATA_BLINK(eyes) (eyes)->rightExData.blink
	//右眼眼睛开合度是否有效，0为无效，1为有效
#define _ISVALID_RIGHT_EYE_EXDATA_OPENNESS(eyes) _GET_VALID_VALUE((unsigned char)EYE_EXDATA_OPENNESS,(eyes)->rightExData.eyeDataExBitMask)
	//获取右眼眼睛开合度，返回(0-100)
#define _GET_RIGHT_EYE_EXDATA_OPENNESS(eyes) (eyes)->rightExData.openness
	//右眼上眼皮数据是否有效，0为无效，1为有效
#define _ISVALID_RIGHT_EYE_EXDATA_EYELIDUP(eyes) _GET_VALID_VALUE((unsigned char)EYE_EXDATA_EYELIDUP,(eyes)->rightExData.eyeDataExBitMask)
	//获取右眼上眼皮数据，返回float（0-1）
#define _GET_RIGHT_EYE_EXDATA_EYELIDUP(eyes) (eyes)->rightExData.eyelidUp
	//右眼下眼皮数据是否有效，0为无效，1为有效
#define _ISVALID_RIGHT_EYE_EXDATA_EYELIDDOWN(eyes) _GET_VALID_VALUE((unsigned char)EYE_EXDATA_EYELIDDOWN,(eyes)->rightExData.eyeDataExBitMask)
	//获取右眼下眼皮数据，返回float（0-1）
#define _GET_RIGHT_EYE_EXDATA_EYELIDDOWN(eyes) (eyes)->rightExData.eyelidDown
}
#endif//API_ASEEGLASSES_7INVENSUN


#endif// _INCLUDE_7INVENSUN_ASEEGLASSES_USER_TYPES_H_